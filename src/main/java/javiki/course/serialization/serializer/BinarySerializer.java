package javiki.course.serialization.serializer;

import javiki.course.serialization.Statable;
import javiki.course.serialization.StateType;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;

public class BinarySerializer {

    public void serializeAndSave(Path filePath, List<Statable<?>> statables) throws IOException {
        Files.createDirectories(filePath.getParent()); // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try (ObjectOutputStream oos = new ObjectOutputStream(Files.newOutputStream(filePath))) {
            oos.writeObject(statables);
        }
        System.out.println("‚úÖ –ë–∏–Ω–∞—Ä–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ " + filePath);
    }

    public List<Statable<?>> downloadAndDeserialize(Path filePath, StateType stateType) throws IOException {
        System.out.println("üì• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑: " + filePath);

        try (ObjectInputStream ois = new ObjectInputStream(Files.newInputStream(filePath))) {
            List<?> objectList = (List<?>) ois.readObject();
            System.out.println("‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.");

            // üõ† –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ç–∏–ø `Statable`
            Function<Object, Statable<?>> stateMapper = StateManagerMapper.getMapper(stateType);
            if (stateMapper == null) {
                throw new IllegalArgumentException("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –º–∞–ø–ø–µ—Ä –¥–ª—è " + stateType.getReadableName());
            }

            return objectList.stream()
                    .map(stateMapper)
                    .collect(Collectors.toList());

        } catch (ClassNotFoundException e) {
            throw new IOException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Binary-—Ñ–∞–π–ª–∞", e);
        }
    }
}
